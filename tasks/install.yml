---
- name: Get installed version
  shell: "cat /usr/share/btrfsmaintenance/version || echo -n '0'"
  failed_when: false
  changed_when: false
  register: installed_version

- name: Check what the latest version is
  shell: |
    set -o pipefail
    git ls-remote --tags --refs {{ btrfsmaintenance_repository }} | sed 's/.*\/v//' | sort -V | tail -n1
  args:
    executable: /bin/bash
  register: latest_version
  failed_when: latest_version.rc != 0
  changed_when: false
  when: btrfsmaintenance_version == 'latest'

- name: Define version to install
  set_fact:
    version_to_install: "{{ latest_version.stdout_lines[0] if btrfsmaintenance_version == 'latest' else btrfsmaintenance_version }}"

- block:
    - name: Ensure source directory exists
      file:
        state: directory
        path: /usr/local/src

    - name: Clone source code
      git:
        repo: "{{ btrfsmaintenance_repository }}"
        version: "v{{ version_to_install }}"
        clone: true
        depth: 1
        force: true
        dest: /usr/local/src/btrfsmaintenance

    # the dist-install.sh script from the repo does a crappy job, therefore do it manually
    - name: "Install btrfsmaintenance scripts version {{ version_to_install }}"
      shell: |
        install -d -oroot -groot -m755 {{ btrfsmaintenance_install_path }}
        install -oroot -groot -m755 btrfs-*.sh btrfsmaintenance-refresh-cron.sh {{ btrfsmaintenance_install_path }}/
        install -oroot -groot -m644 btrfsmaintenance-functions {{ btrfsmaintenance_install_path }}/
        install -oroot -groot -m644 *.service *.path {{ btrfsmaintenance_services_path }}/
      args:
        executable: /bin/bash
        chdir: /usr/local/src/btrfsmaintenance
      changed_when: true

    - name: Reload systemd configs
      systemd:
        daemon_reload: yes
      notify: restart systemd-swap

    - name: Create version file
      copy:
        dest: "/usr/share/btrfsmaintenance/version"
        force: yes
        owner: root
        group: root
        content: "{{ version_to_install }}"
        mode: "644"

  when: version_to_install != installed_version.stdout_lines[0]
